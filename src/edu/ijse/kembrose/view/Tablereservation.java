/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.kembrose.view;


import edu.ijse.kembrose.control.OrderController;
import edu.ijse.kembrose.control.TableController;
import edu.ijse.kembrose.model.OrderDetailsModel;
import edu.ijse.kembrose.model.OrderModel;
import edu.ijse.kembrose.model.ResTableModel;
import edu.ijse.kembrose.model.ReservationDetailsModel;
import edu.ijse.kembrose.model.TableReservationDetailsModel;
import edu.ijse.kembrose.model.TableReservationModel;
import edu.ijse.kembrose.other.IdGenerator;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ruchira
 */
public class Tablereservation extends javax.swing.JFrame {

    private static String tableResId;
    //private static String orderId;
    double totalAmount = 0;
    private ReservationDetailsModel[] details;
    private DefaultTableModel dtm;
    private Object[] row;
    

    /**
     * Creates new form tablereservation1
     */
    private ResTableModel[] tableId;

    public Tablereservation() {
        initComponents();
        setLocationRelativeTo(null);
        setTime();
        setDate();
        loadTableNo();
        setTableResId();
    }

    private void loadTableNo() {
        try {
            tableId = TableController.getAllTableId();
            for (ResTableModel tableNo : tableId) {
                tableNoCombo.addItem(tableNo.getTableId());
            }
        } catch (SQLException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTableResId() {
        try {
            String newTableResId = IdGenerator.getNewId("tablereservation", "tableResId", "tr");
            //String newOrderId = IdGenerator.getNewId("orderForm", "orderId", "or");
            tableResId = newTableResId;
            tableResIdText.setText(tableResId);
            //orderId = newOrderId;
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Orderform.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTime() {
        new Thread() {
            @Override
            public void run() {
                while (true) {
                    Date date = new Date();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss");
                    timelabel.setText(dateFormat.format(date));
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                       
                    }
                }
            }

        }.start();
    }

    private void setDate() {
        java.util.Date date = new java.util.Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String formatedDate = dateFormat.format(date);
        datelabel.setText(formatedDate);
    }
    private void setTextFree(){
        nameText.setText("");
        contactNoText.setText("");
        timeInText.setText("");
        timeOuttext.setText("");
        //dateChooser.setText("");
        locationText.setText("");
        priceText.setText("");
        noOfSeatsText.setText("");
        noOfGuestsText.setText("");
        customerRequestsTextArea.setText("");
    }

    private void setTextFree1(){
    timeInText.setText("");
    timeOuttext.setText("");
    priceText.setText("");
    noOfSeatsText.setText("");
    noOfGuestsText.setText("");
    customerRequestsTextArea.setText("");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        timelabel = new javax.swing.JLabel();
        datelabel = new javax.swing.JLabel();
        piclabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        timeOuttext = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        timeInText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        contactNoText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        noOfGuestsText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        checkbutton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tableResIdText = new javax.swing.JTextField();
        dateChooser = new com.toedter.calendar.JDateChooser();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        locationText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerRequestsTextArea = new javax.swing.JTextArea();
        noOfSeatsText = new javax.swing.JTextField();
        tableNoCombo = new javax.swing.JComboBox();
        confirmbutton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableReservationTable = new javax.swing.JTable();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        totalAmountText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        balanceText = new javax.swing.JTextField();
        paymentText = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 87, 43));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 650));
        jPanel1.setLayout(null);

        jPanel3.setBackground(new java.awt.Color(228, 226, 226));
        jPanel3.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(0, 87, 43));
        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Table Reservations");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(80, 0, 460, 57);

        timelabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        timelabel.setForeground(new java.awt.Color(255, 255, 255));
        timelabel.setText("12.00.00");
        jPanel2.add(timelabel);
        timelabel.setBounds(730, 30, 78, 25);

        datelabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        datelabel.setForeground(new java.awt.Color(255, 255, 255));
        datelabel.setText("20th April 2016");
        jPanel2.add(datelabel);
        datelabel.setBounds(730, 0, 100, 30);

        piclabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/kembrose/view/images/lunch.png"))); // NOI18N
        piclabel.setText("jLabel3");
        jPanel2.add(piclabel);
        piclabel.setBounds(10, 0, 60, 60);

        jPanel3.add(jPanel2);
        jPanel2.setBounds(0, 0, 900, 60);

        jPanel4.setBackground(java.awt.Color.white);
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Customer Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 22))); // NOI18N
        jPanel4.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel2.setText("Time Out  :");
        jPanel4.add(jLabel2);
        jLabel2.setBounds(390, 130, 90, 18);

        timeOuttext.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        timeOuttext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeOuttextKeyReleased(evt);
            }
        });
        jPanel4.add(timeOuttext);
        timeOuttext.setBounds(510, 130, 160, 24);

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel4.setText("Contact No  :");
        jPanel4.add(jLabel4);
        jLabel4.setBounds(20, 120, 90, 18);

        nameText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });
        nameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextKeyReleased(evt);
            }
        });
        jPanel4.add(nameText);
        nameText.setBounds(120, 40, 160, 24);

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel6.setText("Time In  :");
        jPanel4.add(jLabel6);
        jLabel6.setBounds(20, 160, 90, 18);

        timeInText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        timeInText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timeInTextKeyReleased(evt);
            }
        });
        jPanel4.add(timeInText);
        timeInText.setBounds(120, 160, 160, 24);

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel7.setText("Choose Date  :");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(390, 40, 110, 20);

        contactNoText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        contactNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contactNoTextKeyReleased(evt);
            }
        });
        jPanel4.add(contactNoText);
        contactNoText.setBounds(120, 120, 160, 24);

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel11.setText("No Of Guests  :");
        jPanel4.add(jLabel11);
        jLabel11.setBounds(390, 80, 100, 18);

        noOfGuestsText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        noOfGuestsText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                noOfGuestsTextKeyReleased(evt);
            }
        });
        jPanel4.add(noOfGuestsText);
        noOfGuestsText.setBounds(510, 80, 160, 24);

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel10.setText("Name  :");
        jPanel4.add(jLabel10);
        jLabel10.setBounds(20, 40, 60, 18);

        checkbutton6.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        checkbutton6.setText("Check");
        jPanel4.add(checkbutton6);
        checkbutton6.setBounds(760, 150, 100, 40);

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel3.setText("Table Res. Id  :");
        jPanel4.add(jLabel3);
        jLabel3.setBounds(20, 80, 110, 30);

        tableResIdText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jPanel4.add(tableResIdText);
        tableResIdText.setBounds(120, 80, 160, 24);
        jPanel4.add(dateChooser);
        dateChooser.setBounds(510, 40, 160, 20);

        jPanel3.add(jPanel4);
        jPanel4.setBounds(0, 60, 880, 200);

        jPanel5.setBackground(java.awt.Color.white);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Table Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 20))); // NOI18N
        jPanel5.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel8.setText("Customer Requests  :");
        jPanel5.add(jLabel8);
        jLabel8.setBounds(490, 120, 150, 18);

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel9.setText("No Of Seats  :");
        jPanel5.add(jLabel9);
        jLabel9.setBounds(490, 30, 100, 18);

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel12.setText("Table Id  :");
        jPanel5.add(jLabel12);
        jLabel12.setBounds(30, 30, 80, 18);

        jLabel13.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel13.setText("Payment  :");
        jPanel5.add(jLabel13);
        jLabel13.setBounds(240, 280, 110, 20);

        locationText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jPanel5.add(locationText);
        locationText.setBounds(650, 70, 160, 24);

        customerRequestsTextArea.setColumns(20);
        customerRequestsTextArea.setRows(5);
        customerRequestsTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerRequestsTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(customerRequestsTextArea);

        jPanel5.add(jScrollPane1);
        jScrollPane1.setBounds(650, 110, 210, 70);

        noOfSeatsText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jPanel5.add(noOfSeatsText);
        noOfSeatsText.setBounds(650, 30, 160, 24);

        tableNoCombo.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        tableNoCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tableNoComboItemStateChanged(evt);
            }
        });
        jPanel5.add(tableNoCombo);
        tableNoCombo.setBounds(150, 30, 160, 24);

        confirmbutton.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        confirmbutton.setText("Confirm");
        confirmbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmbuttonActionPerformed(evt);
            }
        });
        jPanel5.add(confirmbutton);
        confirmbutton.setBounds(550, 280, 100, 40);

        updateButton.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        updateButton.setText("Updete");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel5.add(updateButton);
        updateButton.setBounds(660, 280, 100, 40);

        cancelButton.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel5.add(cancelButton);
        cancelButton.setBounds(770, 280, 100, 40);

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel14.setText("Price  :");
        jPanel5.add(jLabel14);
        jLabel14.setBounds(30, 70, 80, 20);

        priceText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jPanel5.add(priceText);
        priceText.setBounds(150, 70, 160, 24);

        tableReservationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table Id", "No Of Guests", "TimeIn", "TimeOut", "Date", "Note", "Price", "Status"
            }
        ));
        jScrollPane2.setViewportView(tableReservationTable);
        if (tableReservationTable.getColumnModel().getColumnCount() > 0) {
            tableReservationTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            tableReservationTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableReservationTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            tableReservationTable.getColumnModel().getColumn(6).setPreferredWidth(80);
        }

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(10, 160, 560, 80);

        removeButton.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel5.add(removeButton);
        removeButton.setBounds(150, 110, 100, 30);

        addButton.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel5.add(addButton);
        addButton.setBounds(40, 110, 100, 30);

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel15.setText("Location  :");
        jPanel5.add(jLabel15);
        jLabel15.setBounds(490, 70, 100, 20);

        totalAmountText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        totalAmountText.setText("0.00");
        jPanel5.add(totalAmountText);
        totalAmountText.setBounds(360, 250, 150, 24);

        jLabel16.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel16.setText("Balance  :");
        jPanel5.add(jLabel16);
        jLabel16.setBounds(240, 310, 110, 20);

        jLabel17.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel17.setText("Total Amount  :");
        jPanel5.add(jLabel17);
        jLabel17.setBounds(240, 250, 110, 20);

        balanceText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jPanel5.add(balanceText);
        balanceText.setBounds(360, 310, 150, 24);

        paymentText.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        paymentText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTextActionPerformed(evt);
            }
        });
        paymentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentTextKeyReleased(evt);
            }
        });
        jPanel5.add(paymentText);
        paymentText.setBounds(360, 280, 150, 24);

        jLabel18.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/kembrose/view/images/FontAwesome_f0f5(1)_64.png"))); // NOI18N
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });
        jPanel5.add(jLabel18);
        jLabel18.setBounds(10, 280, 60, 60);

        jPanel3.add(jPanel5);
        jPanel5.setBounds(0, 260, 880, 350);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 30, 880, 610);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableNoComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tableNoComboItemStateChanged
        String tableId = tableNoCombo.getSelectedItem().toString();
        try {
            String location = TableController.searchLocation(tableId);
            locationText.setText(location);
            String price = TableController.searchPrice(tableId);
            priceText.setText(price);
            String noOfSeats = TableController.searchNoOfSeats(tableId);
            noOfSeatsText.setText(noOfSeats);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_tableNoComboItemStateChanged

    private void confirmbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmbuttonActionPerformed
        ArrayList<ReservationDetailsModel> reservationList = new ArrayList<>();
        String name = nameText.getText();
        String contactNo = contactNoText.getText();
       // String timeIn = timeInText.getText();
       // String timeOut = timeOuttext.getText();
        //Integer noOfGuests = Integer.parseInt(noOfGuestsText.getText());
//        Date date = dateChooser.getDate();
//        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//        String formatedDate = dateFormat.format(date);
//        
       // System.out.println(formatedDate);
        
        
                
        //      String resTableId = (String) tableNoCombo.getSelectedItem();
       //Double price = Double.parseDouble(priceText.getText());
       //String location = locationText.getText();
       //String customerRequests = customerRequestsTextArea.getText();
        try {
            
//            ResTableModel resTableModel = TableController.getResTableId(tableNoCombo.getSelectedItem().toString());
//            tableResIdText.setText(tableResId);
           // OrderModel orders = new OrderModel(orderId, resTableNo, contactNo, formatedDate, timeIn, timeOut);
            //OrderController.addOrders(orders);
            //String orderId = orders.getOrderId();
            TableReservationModel reservation = new TableReservationModel(tableResId, name, contactNo );
            boolean isAdded = TableController.addTableReservation(reservation);
            if (isAdded) {
                for (int i = 0; i < tableReservationTable.getRowCount(); i++) {
                 
                  String resTableId1 = (String) tableReservationTable.getValueAt(i, 0);
                  int noOfGuests1 = (int) tableReservationTable.getValueAt(i, 1);
                  String timeIn1 = (String) tableReservationTable.getValueAt(i, 2);
                  String timeOut1 = (String) tableReservationTable.getValueAt(i, 3);
                  String selectedDate1 = (String) tableReservationTable.getValueAt(i, 4);
                  String note1 = (String) tableReservationTable.getValueAt(i, 5);
                  double price1 = (double) tableReservationTable.getValueAt(i, 6);
                  String status = (String) tableReservationTable.getValueAt(i, 7);
                  ReservationDetailsModel detailsModel = new ReservationDetailsModel(tableResId, resTableId1, note1, price1, Double.parseDouble(totalAmountText.getText()), noOfGuests1, selectedDate1, timeIn1, timeOut1, status);
                  
                  if (detailsModel!=null) {
                      reservationList.add(detailsModel);
                  }
                  
                }
                
               boolean isAdded1= TableController.addReservationDetails(reservationList);
                if (isAdded1) {
                    JOptionPane.showMessageDialog(this, "Added Success");
                    dtm.setRowCount(0);
                }else{
                JOptionPane.showMessageDialog(this, "Added Failed");
                }
                
            }
           // ReservationDetailsModel detailsModel = new ReservationDetailsModel(tableResId, orderId, resTableModel.getTableId().toString(),resTableNo, customerRequests, price, Double.parseDouble(totalAmountText.getText()), noOfGuests, selectedDate, timeIn, timeOut);

//            boolean reservation1 = tableReservation(reservation);
//            boolean reservation2 = tableReservationDetail(detailsModel);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_confirmbuttonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
//        String name = nameText.getText();
//        String tableId = (String) dtm.getValueAt(tableReservationTable.getSelectedRow(), 0);
//        String tableResId = tableResIdText.getText();
//        try {
//            boolean isDeleted=TableController.deleteReservation(tableId,tableResId);
//            if (isDeleted) {
//               
//                JOptionPane.showMessageDialog(this, "Delete sucsess....");
//                setTextFree();
//            }else{
//                JOptionPane.showMessageDialog(this, "Delete Failed....");
//                //setTextFree();
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        try{ 
//            if (dtm.getValueAt(tableReservationTable.getSelectedRow(), 7)==null){
//            dtm.setValueAt("Canceled", tableReservationTable.getSelectedRow(), 7);
//            dtm = (DefaultTableModel) tableReservationTable.getModel();
//            dtm.addRow(row);
//            }else{
//            
//            }
//         } catch (NullPointerException | ArrayIndexOutOfBoundsException | NumberFormatException ex) {
//            ex.printStackTrace();
//        }
        tableReservationTable.setValueAt("Canceled", tableReservationTable.getSelectedRow(), 7);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        try {
            
            TableReservationModel reservation = TableController.searchReservation(nameText.getText());
           if (reservation!=null) {
            contactNoText.setText(reservation.getContactNo());
            tableResIdText.setText(reservation.getTableResId());
            //tableNoCombo.setSelectedItem(reservation.getResTableNo());
           }else{
               JOptionPane.showMessageDialog(this, "Customer Not Found...");
                //setTextFree();
            }
             ArrayList<TableReservationDetailsModel> detailsMod = TableController.searchReservationDetails(nameText.getText());
             System.out.println(detailsMod.size());
             DefaultTableModel defaultTableModel = (DefaultTableModel) tableReservationTable.getModel();
           if(detailsMod!=null){
               for (TableReservationDetailsModel tableReservationDetails : detailsMod) {
                   Object[] rowData= {tableReservationDetails.getTableId(), tableReservationDetails.getNoOfGuests(), tableReservationDetails.getTimeIn(), tableReservationDetails.getTimeOut(), tableReservationDetails.getDate(), tableReservationDetails.getNote(), tableReservationDetails.getPrice()};
                   defaultTableModel.addRow(rowData);
                   //System.out.println(detailsMod);
                   //((DefaultTableModel) tableReservationTable.getModel()).addRow(row);
                   //tableResIdText.setText(detail.getTableResId());
                   
                   totalAmountText.setText(tableReservationDetails.getTotalAmount()+"");
                   //dateChooser.setDateFormatString(tableResId);
//                   tableResIdText.setText(detail.getTableResId());
//                   tableResIdText.setText(detail.getTableResId());
               }
           }else{
           JOptionPane.showMessageDialog(this, "Customer Not Found");
           }
           //ResTableModel location = TableController.searchLocation(tableResNo);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_nameTextActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String name = nameText.getText();
        String contactNo = contactNoText.getText();
//        String timeIn = timeInText.getText();
//        String timeOut = timeOuttext.getText();
        //int noOfGuests = Integer.parseInt(noOfGuestsText.getText());
        Date date = dateChooser.getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String formatedDate = dateFormat.format(date);
        String tableId = tableNoCombo.getSelectedItem().toString();
        String resTableId = tableResIdText.getText();
//        double price = Double.parseDouble(priceText.getText());
      // String location = locationText.getText();
       // String customerRequests = customerRequestsTextArea.getText();
        String status = dtm.getValueAt(tableReservationTable.getSelectedRow(), 7).toString();
        int noOfguests = (int) dtm.getValueAt(tableReservationTable.getSelectedRow(), 1);
        double price = (double) dtm.getValueAt(tableReservationTable.getSelectedRow(), 6);
        String timeIn = (String) dtm.getValueAt(tableReservationTable.getSelectedRow(), 2);
        String timeOut = (String) dtm.getValueAt(tableReservationTable.getSelectedRow(), 3);
        String customerRequests = (String) dtm.getValueAt(tableReservationTable.getSelectedRow(), 5);
        //System.out.println(status);
        try {
            
            ResTableModel resTableModel = TableController.getResTableId(tableNoCombo.getSelectedItem().toString());
            //OrderModel orders = new OrderModel(orderId, resTableNo, contactNo, selectedDate, timeIn, timeOut);
            //OrderController.addOrders(orders);
            
            TableReservationModel reservation = new TableReservationModel(resTableId, name, contactNo);
            //System.out.println("++++++++");
            boolean isAdded = TableController.updateTableReservation(reservation);
            if (isAdded) {
                ReservationDetailsModel detailsModel = new ReservationDetailsModel(resTableId, tableId, customerRequests, price, Double.parseDouble(totalAmountText.getText()), noOfguests, formatedDate, timeIn, timeOut, status);
                boolean isAdded1 = TableController.updateReservationDetails(detailsModel);
                if (isAdded1) {
                JOptionPane.showMessageDialog(this, "Update Successful");
                }else{
                JOptionPane.showMessageDialog(this, "Update Failed");
                }
            }else {
            JOptionPane.showMessageDialog(this, "Update failed");
                    }
           // ReservationDetailsModel detailsModel = new ReservationDetailsModel(tableResId, resTableModel.getTableId().toString(), resTableNo, customerRequests, price, Double.parseDouble(totalAmountText.getText()), noOfGuests, selectedDate, timeIn, timeOut);

           // boolean reservation1 = tableReservation(reservation);
            //boolean reservation2 = tableReservationDetail(detailsModel);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//        TableReservationModel table=new TableReservationModel(tableResId, name, contactNo, selectedDate, timeIn, timeOut, noOfGuests, resTableNo);
//        ReservationDetailsModel details = new ReservationDetailsModel(tableResId, orderId, tableResId, customerRequests, price);
//      
//       boolean trm = tablereservation(table);
//       boolean dm = details(details);
//       
       
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       try{
        
        Double price = Double.parseDouble(priceText.getText());
        String note = customerRequestsTextArea.getText();
        String restableId = (String) tableNoCombo.getSelectedItem();
        String timeIn = timeInText.getText();
        String timeOut = timeOuttext.getText();
        Integer noOfGuests = Integer.parseInt(noOfGuestsText.getText());
        Date date = dateChooser.getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String formatedDate = dateFormat.format(date);
        
        totalAmount+=price;
        
        row = new Object[]{restableId, noOfGuests, timeIn, timeOut, formatedDate, note, price};
//         ((DefaultTableModel) tableReservationTable.getModel()).addRow(row);
//        
        dtm = (DefaultTableModel) tableReservationTable.getModel();
        dtm.addRow(row);
        
        
//        String restableID = (String) dtm.getValueAt(tableReservationTable.getSelectedRow(), 0);
//        
//        String tableResID = tableResIdText.getText();
        
        
        
        totalAmountText.setText(Double.toString(totalAmount));
        setTextFree1();
       
       } catch (NullPointerException | ArrayIndexOutOfBoundsException | NumberFormatException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void paymentTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTextActionPerformed
        Double totalAmount = Double.parseDouble(totalAmountText.getText());
        Double payment = Double.parseDouble(paymentText.getText());
        double balance = 0;
        balance = payment - totalAmount;
        balanceText.setText(Double.toString(balance));
        
    }//GEN-LAST:event_paymentTextActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        dtm.removeRow(tableReservationTable.getSelectedRow());
    }//GEN-LAST:event_removeButtonActionPerformed

    private void paymentTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentTextKeyReleased
         String payment=paymentText.getText();
        Pattern pattern = Pattern.compile("[\\d]*");
        Matcher matcher = pattern.matcher(payment);
        boolean matches = matcher.matches();
        if(!matches){
             paymentText.setText(payment.substring(0, payment.length() - 1));
        }
    }//GEN-LAST:event_paymentTextKeyReleased

    private void nameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextKeyReleased
        String name = nameText.getText();
        boolean matches = name.matches("[a-zA-Z[\\s]]*");
        if(!matches){
        nameText.setText(name.substring(0, name.length() -1));
        }
    }//GEN-LAST:event_nameTextKeyReleased

    private void noOfGuestsTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfGuestsTextKeyReleased
        String nogt = noOfGuestsText.getText();
        boolean matches = nogt.matches("[\\d]{1,2}");
        if(!matches){
        noOfGuestsText.setText(nogt.substring(0, nogt.length() -1));
        }
    }//GEN-LAST:event_noOfGuestsTextKeyReleased

    private void contactNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactNoTextKeyReleased
        String cNo = contactNoText.getText();
        boolean matches = cNo.matches("[\\d]{0,10}");
        if(!matches){
        contactNoText.setText(cNo.substring(0, cNo.length() -1));
        }
    }//GEN-LAST:event_contactNoTextKeyReleased

    private void timeOuttextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeOuttextKeyReleased
         String timeOut = timeOuttext.getText();
        boolean matches = timeOut.matches("[\\d]{0,2}[\\W]{0,1}[\\d]{0,2}[\\W]{0,1}[\\d]{0,2}[\\W]{0,1}");
        if(!matches){
        timeOuttext.setText(timeOut.substring(0, timeOut.length()-1 ));
        }
    }//GEN-LAST:event_timeOuttextKeyReleased

    private void timeInTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeInTextKeyReleased
        String timeIn = timeInText.getText();
        boolean matches = timeIn.matches("[\\d]{0,2}[\\W]{0,1}[\\d]{0,2}[\\W]{0,1}[\\d]{0,2}[\\W]{0,1}");
        if(!matches){
        timeInText.setText(timeIn.substring(0, timeIn.length()-1 ));
        }
    }//GEN-LAST:event_timeInTextKeyReleased

    private void customerRequestsTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerRequestsTextAreaKeyReleased
        String crT = customerRequestsTextArea.getText();
        boolean matches = crT.matches("[a-zA-Z]*");
        if(!matches){
        customerRequestsTextArea.setText(crT.substring(0, crT.length()-1 ));
        }
    }//GEN-LAST:event_customerRequestsTextAreaKeyReleased

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        new Orderform().setVisible(true);
    }//GEN-LAST:event_jLabel18MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablereservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablereservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablereservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablereservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Tablereservation().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField balanceText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton checkbutton6;
    private javax.swing.JButton confirmbutton;
    private javax.swing.JTextField contactNoText;
    private javax.swing.JTextArea customerRequestsTextArea;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel datelabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField locationText;
    private javax.swing.JTextField nameText;
    private javax.swing.JTextField noOfGuestsText;
    private javax.swing.JTextField noOfSeatsText;
    private javax.swing.JTextField paymentText;
    private javax.swing.JLabel piclabel;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox tableNoCombo;
    private javax.swing.JTextField tableResIdText;
    private javax.swing.JTable tableReservationTable;
    private javax.swing.JTextField timeInText;
    private javax.swing.JTextField timeOuttext;
    private javax.swing.JLabel timelabel;
    private javax.swing.JTextField totalAmountText;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private boolean tableReservation(TableReservationModel reservation) {
        try {
            boolean isAdded = TableController.addTableReservation(reservation);
             if (isAdded) {
                JOptionPane.showMessageDialog(this, "Added success");
            } else {
                JOptionPane.showMessageDialog(this, "Added Failed");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
//    private boolean tableReservationDetail(ReservationDetailsModel detailsModel) {
//        try {
//            boolean isAdded = TableController.addReservationDetails(detailsModel);
//            if (isAdded) {
//                JOptionPane.showMessageDialog(this, "Added success");
//               setTextFree();
//            } else {
//                JOptionPane.showMessageDialog(this, "Added Failed");
//            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return false;
//    }

//    private boolean tablereservation(TableReservationModel tableReservationModel) {
//        boolean isAdded = TableController.addReservationDetails(table);
//        if (isAdded) {
//            JOptionPane.showMessageDialog(this, "Added success");
//            setTextFree();
//        } else {
//            JOptionPane.showMessageDialog(this, "Added Failed");
//        }
//        return false;
//       
//    }
//
//    private boolean details(ReservationDetailsModel detailsModel) {
//          try {
//            boolean isAdded = TableController.addReservationDetails(detail);
//            if (isAdded) {
//                JOptionPane.showMessageDialog(this, "Added success");
//               setTextFree();
//            } else {
//                JOptionPane.showMessageDialog(this, "Added Failed");
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(Tablereservation.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return false;
//    }

}
